#!/bin/bash

readonly IMAGE_NAME=flederwiesel/yocto
readonly CONTAINER_NAME=flederwiesel-yocto
readonly VERSION=0.1

set -euo pipefail

# Check docker installation
dpkg --list docker.io &> /dev/null ||
{
	sed $'s/\\\\033/\033/g' <<-EOF >&2
		\033[1;37mCannot find docker. Please set up path accordingly or\033[m
		\033[1;37minstall through \`sudo apt install --yes docker.io\`.\033[m
EOF

	exit 1
}

# Check whether user is in docker group
id -Gn | grep -q docker ||
[[ $EUID = 0 ]] ||
{
	sed $'s/\\\\033/\033/g' <<-EOF >&2
		\033[1;37mUser $(id -un) is not in the docker group.\033[m
		\033[1;37mUse \`sudo usermod -aG docker $(id -un)\` to add and\033[m
		\033[1;37mlog off/on to apply new group membership.\033[m
EOF

	exit 1
}

# shellcheck disable=SC2155
readonly SCRIPTDIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")

options=()

for arg
do
	if [[ ${expect:-} ]]; then
		case "$expect" in
		--target|--workdir)
			options+=("$expect" "$arg")
			;;
		esac

		unset expect
	else
		case "$arg" in
		-h|--help)
			sed $'s/\\\\033/\033/g' <<-EOF
				\033[1;37m$0\033[m [build|run|rm [image]] [options]

				    build options:
				        --target yocto-base

				    run options:
				        --rm | Remove container after run
				        --workdir /path/to

				    docker options:
				        --*=* | Passed on to the actual docker command.

				EOF

			exit
			;;
		--rm)
			if [[ "run" == "${cmd:-}" ]]; then
				oneshot=true
			else
				echo 'Option --rm is only valid after `run` command.' >&2
				exit 1
			fi
			;;
		--target|--workdir)
			expect="$arg"
			;;
		--target=*|--workdir=*)
			options+=(--target "${arg#*=}")
			;;
		--*)
			options+=("$arg")
			;;
		build|run|rm)
			cmd="$arg"
			;;
		image)
			if [[ "rm" == "${cmd:-}" ]]; then
				rmi=true
			else
				echo 'Option `image` is only valid after `rm` cmd.' >&2
				exit 1
			fi
			;;
		*)
			args+=("$arg")
			;;
		esac
	fi
done

set -- "${args[@]}"

if [[ "build" == "${cmd:-}" ]]; then
	docker build --tag "$IMAGE_NAME:$VERSION" "${options[@]}" "$SCRIPTDIR"
elif [[ "run" == "${cmd:-}" ]]; then
	user=$(id -un)
	uid=$(id -u)
	gid=$(id -g)

	# Check whether container already exists
	if status=$(
			docker inspect --type container "$CONTAINER_NAME" --format "{{.State.Status}}" 2> /dev/null
		); then
		if [ "$status" = exited ]; then
			docker start "$CONTAINER_NAME"
		fi
	else
		# Need to create, check for existence of image
		resp=$(docker inspect --type image "$IMAGE_NAME:$VERSION" 2>&1 > /dev/null) ||
		{
			echo "$resp" >&2
			exit 1
		}

		touch "$SCRIPTDIR/.bash_history"

		docker create \
			--name "$CONTAINER_NAME" \
			--hostname "$CONTAINER_NAME" \
			--volume "$SCRIPTDIR:/workspace" \
			"${options[@]}" \
			"$IMAGE_NAME:$VERSION" \
			sleep infinity > /dev/null

		docker start "$CONTAINER_NAME" > /dev/null

		group=$(id -gn)

		# Create group with caller's gid in container, if not exists
		docker exec --interactive "$CONTAINER_NAME" bash <<-EOF
			getent group "$gid" ||
			groupadd --gid "$gid" "$group"
			EOF

		# Create user with caller's uid in container, if not exists
		docker exec --interactive "$CONTAINER_NAME" bash <<-EOF
			getent passwd "$uid" ||
			useradd \
				--uid "$uid" \
				--gid "$gid" \
				--no-user-group \
				--create-home \
				--home-dir "/home/$user" \
				"$user"
			EOF

		docker exec --interactive "$CONTAINER_NAME" bash <<-EOF
			ln -s /workspace/.bash_history "/home/$user/"
			EOF
	fi

	exec+=(
		--user "$uid:$gid"
		--workdir /workspace
		--env "TERM=${TERM:-xterm-color}"
	)

	if [[ -t 0 ]]; then
		exec+=(--tty)
	fi

	if [[ -z "$*" ]]; then
		exec+=(--interactive)
	fi

	docker exec \
		"${exec[@]}" \
		"${options[@]}" \
		"$CONTAINER_NAME" \
		"${@:-bash}"

	if ${oneshot:-false}; then
		docker container rm --force "$CONTAINER_NAME" > /dev/null
	fi
elif [[ "rm" == "${cmd:-}" ]]; then
	if docker inspect --type container "$CONTAINER_NAME" &> /dev/null; then
		docker container rm --force "$CONTAINER_NAME"
	fi
	if ${rmi:-false} && docker inspect --type image "$IMAGE_NAME:$VERSION" &> /dev/null; then
		docker image rm "$IMAGE_NAME:$VERSION"
	fi
else
	echo "No or unknown command specified." >&2
	exit 1
fi
